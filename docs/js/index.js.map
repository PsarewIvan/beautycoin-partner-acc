{"version":3,"sources":["datepicker.js","input.js","popup.js","select.js","tooltip.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["(() => {\n    const input = document.querySelector('.js-datepicker');\n\n    if (!input) return;\n\n    const insertPresets = (picker) => {\n        const existing = picker.ui.querySelector('.js-datepicker-preset-list');\n\n        if (existing) existing.remove();\n\n        const template = document.querySelector('.js-datepicker-preset-list');\n\n        if (!template) return;\n\n        const clone = template.cloneNode(true);\n        const container = picker.ui.querySelector('.container__main');\n\n        if (container) {\n            container.style.display = 'flex';\n            container.insertBefore(clone, container.firstChild);\n        }\n\n        clone.querySelectorAll('div[data-range]').forEach((el) => {\n            el.addEventListener('click', () => {\n                const type = el.getAttribute('data-range');\n                setPresetRange(type);\n            });\n        });\n    };\n\n    const picker = new Litepicker({\n        element: input,\n        singleMode: false,\n        format: 'DD.MM.YYYY',\n        lang: 'ru-RU',\n        numberOfMonths: 2,\n        numberOfColumns: 2,\n        autoApply: false,\n        showTooltip: false,\n        tooltipText: {\n            one: 'день',\n            other: 'дней',\n        },\n        setup: (picker) => {\n            picker.on('show', () => {\n                insertPresets(picker);\n            });\n            picker.on('render', () => {\n                insertPresets(picker);\n            });\n        },\n    });\n\n    function setPresetRange(type) {\n        const now = dayjs();\n        let start, end;\n\n        if (type === '7') {\n            start = now.subtract(6, 'day');\n            end = now;\n        } else if (type === '30') {\n            start = now.subtract(29, 'day');\n            end = now;\n        } else if (type === 'this-month') {\n            start = now.startOf('month');\n            end = now.endOf('month');\n        } else if (type === 'last-month') {\n            start = now.subtract(1, 'month').startOf('month');\n            end = now.subtract(1, 'month').endOf('month');\n        }\n\n        picker.setDateRange(\n            start.format('YYYY-MM-DD'),\n            end.format('YYYY-MM-DD')\n        );\n        picker.hide();\n    }\n})();\n","(() => {\n    const ACTIVE_CLASS = 'active';\n    const nodes = document.querySelectorAll('.js-input-node');\n\n    nodes.forEach((node) => {\n        const input = node.querySelector('.js-input');\n        const show = node.querySelector('.js-input-show');\n        const openIcon = node.querySelector('.js-input-icon-open');\n        const closedIcon = node.querySelector('.js-input-icon-closed');\n        const alert = node.querySelector('.js-input-alert');\n        const reset = node.querySelector('.js-input-reset');\n\n        show?.addEventListener('click', () => {\n            const type = input?.getAttribute('type');\n\n            if (type === 'password') {\n                input.setAttribute('type', 'text');\n                openIcon?.classList.remove('hidden');\n                closedIcon?.classList.add('hidden');\n            } else {\n                input.setAttribute('type', 'password');\n                openIcon?.classList.add('hidden');\n                closedIcon?.classList.remove('hidden');\n            }\n        });\n\n        input?.addEventListener('blur', (event) => {\n            if (event.target.value === '') {\n                alert?.classList.add(ACTIVE_CLASS);\n            } else {\n                alert?.classList.remove(ACTIVE_CLASS);\n            }\n        });\n\n        input?.addEventListener('input', (event) => {\n            if (event.target.value === '') {\n                reset?.classList.remove(ACTIVE_CLASS);\n\n                if (reset && show) {\n                    show.classList.remove('shift');\n                }\n            } else {\n                reset?.classList.add(ACTIVE_CLASS);\n                alert?.classList.remove(ACTIVE_CLASS);\n\n                if (reset && show) {\n                    show.classList.add('shift');\n                }\n            }\n        });\n\n        reset?.addEventListener('click', () => {\n            if (input) {\n                input.value = '';\n                reset?.classList.remove(ACTIVE_CLASS);\n            }\n\n            if (reset && show) {\n                show.classList.remove('shift');\n            }\n        });\n    });\n})();\n","(() => {\n    const supportButtons = document.querySelectorAll('.js-support-button');\n\n    const popupSupport = document.querySelector('.js-popup-support');\n    const popupSuccess = document.querySelector('.js-popup-success');\n\n    const closePopupButtons = document.querySelectorAll('.js-close-popup');\n    const successButtons = document.querySelectorAll(\n        '.js-success-popup-button'\n    );\n\n    closePopupButtons.forEach((button) => {\n        button?.addEventListener('click', closeAllPopup);\n    });\n\n    supportButtons.forEach((button) => {\n        button?.addEventListener('click', () => {\n            closeAllPopup();\n            openPopup(popupSupport)();\n        });\n    });\n\n    successButtons.forEach((button) => {\n        button?.addEventListener('click', () => {\n            closeAllPopup();\n            openPopup(popupSuccess)();\n        });\n    });\n\n    popupSupport?.addEventListener('click', overlayClose(popupSupport));\n    popupSuccess?.addEventListener('click', overlayClose(popupSuccess));\n\n    function closeAllPopup() {\n        closePopup(popupSupport)();\n        closePopup(popupSuccess)();\n    }\n\n    function overlayClose(element) {\n        return (evt) => {\n            if (evt.target === element) {\n                closePopup(element)();\n            }\n        };\n    }\n\n    function openPopup(element) {\n        return () => {\n            element?.classList.remove('hidden');\n            element?.focus();\n            document.body.classList.add('body-lock');\n            trapFocus(element);\n        };\n    }\n\n    function closePopup(element) {\n        return () => {\n            element?.classList.add('hidden');\n            document.body.classList.remove('body-lock');\n        };\n    }\n\n    function trapFocus(element) {\n        const focusableElements = element?.querySelectorAll(\n            'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        );\n\n        if (element && focusableElements) {\n            const firstFocusableElement = focusableElements[0];\n            const lastFocusableElement =\n                focusableElements[focusableElements.length - 1];\n\n            element.addEventListener('keydown', function (e) {\n                const isTabPressed = e.key === 'Tab' || e.keyCode === 9;\n\n                if (!isTabPressed) {\n                    return;\n                }\n\n                if (e.shiftKey) {\n                    if (document.activeElement === firstFocusableElement) {\n                        lastFocusableElement.focus();\n                        e.preventDefault();\n                    }\n                } else {\n                    if (document.activeElement === lastFocusableElement) {\n                        firstFocusableElement.focus();\n                        e.preventDefault();\n                    }\n                }\n            });\n        }\n    }\n})();\n","(() => {\n    const DATE_PICKER = `\n        <div class=\"datepicker-component js-datepicker-wrapper\">\n            <input class=\"datepicker-component__input js-datepicker\" name=\"datepicker\" type=\"text\" />\n        </div>\n    `;\n\n    const selectsWrapper = document.querySelectorAll(\n        '.js-select-component-wrapper'\n    );\n\n    selectsWrapper.forEach((selectWrapper) => {\n        const select = selectWrapper.querySelector('.js-select-component');\n        const placeholder = select?.dataset.placeholder;\n        const options = select?.querySelectorAll('option');\n        const reset = selectWrapper?.querySelector('.js-select-reset');\n\n        const dataOptions = Array.from(options).map(getSlimOption);\n\n        function getSlimOption(option) {\n            if (option.value === 'calendar') {\n                return {\n                    html: DATE_PICKER,\n                    text: 's',\n                    selected: option.dataset.selected === 'true',\n                    value: option.value,\n                };\n            }\n\n            return {\n                text: option.innerHTML,\n                value: option.value,\n                selected: option.dataset.selected === 'true',\n            };\n        }\n\n        const searchPlaceholder = selectWrapper.dataset.placeholder;\n        const searchText = selectWrapper.dataset.searchText;\n\n        const slimSelect = new SlimSelect({\n            select,\n            settings: {\n                showSearch: Boolean(searchPlaceholder),\n                searchPlaceholder,\n                searchText,\n            },\n            data: [\n                ...(placeholder\n                    ? [{ placeholder: true, text: placeholder }]\n                    : []),\n                ...dataOptions,\n            ],\n            events: {\n                beforeChange: (newVal, oldVal) => {\n                    const value = newVal?.[0]?.value;\n\n                    if (value.includes('calendar')) {\n                        return false;\n                    }\n                },\n                afterChange: (evt, q) => {\n                    const value = evt?.[0]?.value;\n\n                    console.log(evt, q);\n\n                    if (value === 'calendar') {\n                        // showCalendar();\n                    }\n\n                    const arrow = selectWrapper?.querySelector('.ss-arrow');\n\n                    if (value) {\n                        reset?.classList.remove('hidden');\n                        arrow?.classList.add('hidden');\n                    }\n                },\n            },\n        });\n\n        const selectedOption = dataOptions.find(\n            (opt) => opt.selected && opt.value\n        );\n\n        if (selectedOption) {\n            const selectDiv = selectWrapper.querySelector(\n                `div[data-id=\"${slimSelect?.settings?.id}\"]`\n            );\n\n            const arrow = selectWrapper?.querySelector('.ss-arrow');\n            selectDiv?.classList.add('select-component_selected');\n            reset?.classList.remove('hidden');\n            arrow?.classList.add('hidden');\n        }\n\n        reset?.addEventListener('click', () => {\n            if (slimSelect) {\n                const arrow = selectWrapper?.querySelector('.ss-arrow');\n\n                slimSelect.setSelected('', false);\n                reset.classList.add('hidden');\n                arrow.classList.remove('hidden');\n            }\n        });\n\n        const selectDiv = selectWrapper.querySelector(\n            `div[data-id=\"${slimSelect?.settings?.id}\"]`\n        );\n\n        select?.addEventListener('change', (event) => {\n            if (dataOptions.some(({ value }) => value === event.target.value)) {\n                selectDiv.classList.add('select-component_selected');\n            } else {\n                selectDiv.classList.remove('select-component_selected');\n            }\n        });\n\n        if (!placeholder) {\n            const arrow = selectWrapper?.querySelector('.ss-arrow');\n            selectDiv?.classList.add('select-component_selected');\n            reset?.classList.remove('hidden');\n            arrow?.classList.add('hidden');\n        }\n    });\n\n    // --------\n\n    // const dateInputWrapper = document.querySelector('.js-datepicker-wrapper');\n    // // const calendar = dateInputWrapper?.querySelector(\n    // //     '.js-datepicker-calendar-icon'\n    // // );\n    // // const reset = dateInputWrapper?.querySelector('.js-datepicker-reset');\n    // const dateInput = dateInputWrapper?.querySelector('.js-datepicker');\n\n    // let datepicker = initDatepicker();\n\n    // // initCalendar();\n\n    // // window.addEventListener('resize', initCalendar);\n\n    // function initCalendar() {\n    //     if (!dateInput) return;\n\n    //     // if (isMobile()) {\n    //     //     datepicker.destroy();\n    //     //     dateInput.type = 'date';\n    //     // } else {\n    //     if (datepicker) {\n    //         datepicker.destroy();\n    //     }\n\n    //     dateInput.type = 'text';\n    //     datepicker = initDatepicker();\n    //     // }\n    // }\n\n    // function initDatepicker() {\n    //     if (typeof Datepicker !== 'function') {\n    //         return;\n    //     }\n\n    //     console.log('[dateInput]', dateInput);\n\n    //     dateInput?.addEventListener('changeDate', handleDateChange);\n    //     // reset?.addEventListener('click', handleResetClick);\n\n    //     return dateInput\n    //         ? new Datepicker(dateInput, {\n    //               language: 'ru',\n    //               autohide: true,\n    //               maxView: 2,\n    //               todayHighlight: true,\n    //               prevArrow: getChevronIcon(),\n    //               nextArrow: getChevronIcon(),\n    //           })\n    //         : null;\n    // }\n\n    // function handleDateChange(event) {\n    //     if (!event.target.value || event.target.value === '') {\n    //         // calendar?.classList.remove('hidden');\n    //         // reset?.classList.add('hidden');\n    //         dateInputWrapper?.classList.remove('datepicker-component_selected');\n    //     } else {\n    //         // calendar?.classList.add('hidden');\n    //         // reset?.classList.remove('hidden');\n    //         dateInputWrapper?.classList.add('datepicker-component_selected');\n    //     }\n    // }\n\n    // function handleResetClick() {\n    //     datepicker?.setDate({ clear: true });\n    //     // calendar?.classList.remove('hidden');\n    //     // reset?.classList.add('hidden');\n    //     dateInputWrapper?.classList.remove('datepicker-component_selected');\n    // }\n\n    // // function isMobile() {\n    // //     return window.innerWidth <= MOBILE_WIDTH;\n    // // }\n\n    // function getChevronIcon() {\n    //     return `\n    //         <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n    //             <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.5303 3.96967C15.8232 4.26256 15.8232 4.73744 15.5303 5.03033L8.56066 12L15.5303 18.9697C15.8232 19.2626 15.8232 19.7374 15.5303 20.0303C15.2374 20.3232 14.7626 20.3232 14.4697 20.0303L6.96967 12.5303C6.67678 12.2374 6.67678 11.7626 6.96967 11.4697L14.4697 3.96967C14.7626 3.67678 15.2374 3.67678 15.5303 3.96967Z\" fill=\"#5C5C5C\"/>\n    //         </svg>`;\n    // }\n})();\n","(() => {\n    const TOOLTIP_LEFT_CLASS = 'tooltip_left';\n    const TOOLTIP_BOTTOM_CLASS = 'tooltip_bottom';\n\n    document.addEventListener('DOMContentLoaded', function () {\n        window.addEventListener('resize', initTooltip);\n        initTooltip();\n    });\n\n    function initTooltip() {\n        const triggers = document.querySelectorAll('.js-tooltip-trigger');\n\n        triggers?.forEach((trigger) => {\n            const tooltip = trigger.querySelector('.js-tooltip');\n\n            if (tooltip) {\n                adjustTooltipPosition(tooltip);\n            }\n        });\n    }\n\n    function adjustTooltipPosition(tooltip) {\n        // tooltip.classList.remove(TOOLTIP_LEFT_CLASS);\n        tooltip.classList.remove(TOOLTIP_BOTTOM_CLASS);\n\n        const viewportWidth = window.innerWidth;\n        const tooltipRect = tooltip.getBoundingClientRect();\n\n        const tooltipRightPointX = tooltipRect.left + tooltipRect.width;\n        const tooltipTopPointY = tooltipRect.top;\n\n        if (tooltipRightPointX > viewportWidth) {\n            // For right position\n            // tooltip.classList.add(TOOLTIP_LEFT_CLASS);\n        }\n\n        if (tooltipTopPointY < 0) {\n            tooltip.classList.add(TOOLTIP_BOTTOM_CLASS);\n        }\n    }\n})();\n"]}